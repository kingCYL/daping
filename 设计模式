设计模式是对软件设计开发过程中反复出现的某类问题的通用解决方案。
设计模式更多的是指导思想和方法论，而不是现成的代码，当然每种设计模式都有每种语言中的具体实现方式。
学习设计模式更多的是理解各种模式的内在思想和解决的问题，毕竟这是前人无数经验总结成的最佳实践，而代码实现则是对加深理解的辅助。

设计模式可以分为三大类：
 创建型模式(Creational Patterns): 处理对象的创建，根据实际情况使用合适的方式创建对象。常规的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。
    工厂模式，单例模式，原型模式，构造器模式

  结构型模式(Structural Patterns): 通过识别系统中【组件之间】的简单关系来简化系统的设计。
    装饰器模式，适配器模式，代理模式，桥接模式，外观模式，组合模式，享元模式

  行为型模式(Behavioral Patterns):用于识别【对象之间】常见的交互模式并加以实现，如此，增加了这些交互的灵活性。
    策略模式，观察者模式，迭代器模式，状态模式，解释器模式，中介模式，备忘录模式，访问者模式，模板模式，职责模式，命令模式

工厂模式
  1.简单工厂（静态工厂模式）
    适用于创建的对象数量少，创建逻辑不复杂时
    传入参数，返回对应参数的实例，无需关注创建相关的细节
    缺点：一个工厂函数包裹大量多个对象的构造函数，当要维护的对象很多时，工厂函数会庞大难以维护
    优点：只需传入一个参数，即可得到目标对象的实例
    例子：用户权限函数{ 超级管理员构造函数，管理员构造函数，普通用户构造函数 }

  2.抽象工厂（工厂方法）
    同简单工厂，区别是把各个对象的构造函数抽出，让工厂函数只做实例化动作
    可以将各个对象的构造函数，添加到工厂函数的原型中，具体使用中可以做调整，主要核心思想是将各个对象的构建逻辑抽出
    优点：新增对象时工厂函数不变，只需在原型中添加即可调用
    缺点：数量庞大时，工厂函数的原型会庞大
  

单例模式
  保证一个类只有一个实例，并且提供一个访问它的全局访问点
  用一个变量标识当前是否已经为某个类创建过对象，如果是，则在下一次获取这个类的实例时，直接返回之前创建的对象（可用闭包实现）
  优点：可以用来划分命名空间，减少全局变量的数量；可以被实例化，且实例化一次，再次实例化生成的也是第一个实例
  例子：线程池、全局缓存、浏览器中的window对象、登录浮窗
  
代理模式

观察者模式

策略模式

模块模式

构造函数模式

混合模式
